package form

import (
	"fmt"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/label"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/utils"
)

// FormSignals defines the signal structure for form components
type FormSignals struct {
	Submitted bool   `json:"submitted"`
	Name      string `json:"name"`
	Email     string `json:"email"`
}

// Form wrapper component
templ Form(args FormArgs) {
	{{
		// Create signals using the new structured system
		signals := utils.Signals(args.ID, FormSignals{
			Submitted: false,
			Name:      "",
			Email:     "",
		})

		// Set up form attributes
		var formAttrs templ.Attributes
		formAttrs = make(templ.Attributes)

		// Copy user-provided attributes first
		for k, v := range args.Attributes {
			formAttrs[k] = v
		}

		// Add form-specific attributes
		if args.ID != "" {
			formAttrs["id"] = args.ID
		}

		if args.Action != "" {
			// Check if there's a target specified in attributes
			target := ""
			if targetAttr, exists := args.Attributes["data-target"]; exists {
				target = fmt.Sprintf(", target: '%s'", targetAttr)
				// Remove data-target from attributes as we've handled it
				delete(formAttrs, "data-target")
			}
			formAttrs["data-on-submit"] = fmt.Sprintf("@post('%s', {contentType: 'form'%s})", templ.SafeURL(args.Action), target)
		}

		if args.Class != "" {
			formAttrs["class"] = args.Class
		}
	}}
	<div data-signals={ signals.DataSignals }>
		<form
			{ formAttrs... }
		>
			{ children... }
		</form>
	</div>
}

// FormItem component - container for form field
templ FormItem(args FormItemArgs) {
	{{
		classes := formItemVariants(args.Class)
	}}
	<div
		data-slot="form-item"
		class={ classes }
		{ args.Attributes... }
	>
		{ children... }
	</div>
}

// FormLabel component - label for form field
templ FormLabel(args FormLabelArgs) {
	{{
		classes := formLabelVariants(args.Class, args.HasError)
	}}
	@label.Label(label.LabelArgs{
		Class: classes,
		For:   args.For,
		Attributes: templ.Attributes{
			"data-slot":  "form-label",
			"data-error": templ.Bool(args.HasError),
		},
	}) {
		{ children... }
	}
}

// FormDescription component - help text for form field
templ FormDescription(args FormDescriptionArgs) {
	{{
		classes := formDescriptionVariants(args.Class)
	}}
	<p
		data-slot="form-description"
		if args.ID != "" {
			id={ args.ID }
		}
		class={ classes }
		{ args.Attributes... }
	>
		{ children... }
	</p>
}

// FormMessage component - error message for form field
templ FormMessage(args FormMessageArgs) {
	{{
		classes := formMessageVariants(args.Class)
	}}
	<p
		data-slot="form-message"
		if args.ID != "" {
			id={ args.ID }
		}
		class={ classes }
		{ args.Attributes... }
	>
		if args.Message != "" {
			{ args.Message }
		} else {
			{ children... }
		}
	</p>
}
