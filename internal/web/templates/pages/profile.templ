package pages

import (
	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// ProfileContent is the fragment (no layout) for the profile page main area.
templ ProfileContent(basePath string, csrf string, errs map[string]string, username string, success string) {
	<section class="card">
		<h2>User Profile</h2>
		<p><strong>Username:</strong> { username }</p>
	</section>
	<section class="card">
		<div data-signals="{theme: 'system'}">
			<h3>Appearance</h3>
			<p class="text-sm text-muted-foreground">Choose light, dark or system theme.</p>
			<label class="text-sm font-medium">Theme</label>
			<select data-bind="$theme" class="w-full p-2 border rounded" data-on-change={ "localStorage.setItem('theme', $theme); document.documentElement.classList.toggle('dark', $theme === 'dark');" }>
				<option value="light">Light</option>
				<option value="dark">Dark</option>
				<option value="system">System</option>
			</select>
		</div>
	</section>
	<section class="card">
		{{
			signals := utilsc.Signals("profile_password_form", map[string]string{
				"current_password": "",
				"new_password":     "",
				"confirm_password": "",
			})
		}}
		<div data-signals={ signals.DataSignals }>
			<h3>Change Password</h3>
			<section id="profile-alert">
				if success != "" {
					<div class="alert alert-success">{ success }</div>
				}
				if errs["form"] != "" {
					<div class="alert alert-danger">{ errs["form"] }</div>
				}
			</section>
			@formc.Form(formc.FormArgs{
				ID:     "profile_password_form_form",
				Action: basePath + "/profile/password",
				Attributes: templ.Attributes{
					"data-target": "profile-alert",
				},
			}) {
				<input type="hidden" name="csrf_token" value={ csrf }/>
				@formc.FormItem(formc.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For:      "current_password",
						HasError: errs["current_password"] != "",
					}) {
						Current password
					}
					@inputc.Input(inputc.InputArgs{
						Type:       "password",
						ID:         "current_password",
						Name:       "current_password",
						FormID:     "profile_password_form",
						Attributes: templ.Attributes{"autocomplete": "current-password"},
					})
					@formc.FormMessage(formc.FormMessageArgs{
						ID:      "msg-current_password",
						Message: errs["current_password"],
					})
				}
				@formc.FormItem(formc.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For:      "new_password",
						HasError: errs["new_password"] != "",
					}) {
						New password
					}
					@inputc.Input(inputc.InputArgs{
						Type:       "password",
						ID:         "new_password",
						Name:       "new_password",
						FormID:     "profile_password_form",
						Attributes: templ.Attributes{"autocomplete": "new-password"},
					})
					@formc.FormMessage(formc.FormMessageArgs{
						ID:      "msg-new_password",
						Message: errs["new_password"],
					})
				}
				@formc.FormItem(formc.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For:      "confirm_password",
						HasError: errs["confirm_password"] != "",
					}) {
						Confirm new password
					}
					@inputc.Input(inputc.InputArgs{
						Type:       "password",
						ID:         "confirm_password",
						Name:       "confirm_password",
						FormID:     "profile_password_form",
						Attributes: templ.Attributes{"autocomplete": "new-password"},
					})
					@formc.FormMessage(formc.FormMessageArgs{
						ID:      "msg-confirm_password",
						Message: errs["confirm_password"],
					})
				}
				<div class="actions">
					@buttonc.Button(buttonc.ButtonArgs{
						Type:    "submit",
						Variant: "default",
					}) {
						Update Password
					}
				</div>
			}
		</div>
	</section>
}

// ProfilePage composes BaseLayout + ProfileContent for initial load.
templ ProfilePage(basePath string, title string, csrf string, errs map[string]string, username string, success string) {
	@layouts.Root(basePath, title, true, csrf) {
		@ProfileContent(basePath, csrf, errs, username, success)
	}
}
