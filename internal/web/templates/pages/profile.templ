package pages

import (
	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/themetoggle"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// ProfilePasswordFragment returns the password change section for DataStar fragment replacement
templ ProfilePasswordFragment(basePath, csrf string, errs map[string]string, success string) {
	<div id="profile-password-container" class="bg-card text-card-foreground rounded-xl border shadow-sm p-6 mb-6">
		{{
			signals := utilsc.Signals("profile_password_form", map[string]string{
				"current_password": "",
				"new_password":     "",
				"confirm_password": "",
			})
		}}
		<div data-signals={ signals.DataSignals }>
			<div class="mb-4">
				<h3 class="text-lg font-semibold text-foreground">Change Password</h3>
			</div>
			<div id="profile-alert" class="mb-4">
				if success != "" {
					<div class="alert-success">{ success }</div>
				}
				if errs["form"] != "" {
					<div class="alert-error">{ errs["form"] }</div>
				}
			</div>
			@formc.Form(formc.FormArgs{
				ID:     "profile_password_form_form",
				Action: basePath + "/profile/password",
				Attributes: templ.Attributes{
					"data-target": "#profile-password-container",
				},
			}) {
				<input type="hidden" name="csrf_token" value={ csrf }/>
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For:      "current_password",
						HasError: errs["current_password"] != "",
					}) {
						Current password
					}
					@inputc.Input(inputc.InputArgs{
						Type:       "password",
						ID:         "current_password",
						Name:       "current_password",
						FormID:     "profile_password_form",
						Attributes: templ.Attributes{"autocomplete": "current-password"},
					})
					@formc.FormMessage(formc.FormMessageArgs{
						ID:      "msg-current_password",
						Message: errs["current_password"],
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For:      "new_password",
						HasError: errs["new_password"] != "",
					}) {
						New password
					}
					@inputc.Input(inputc.InputArgs{
						Type:       "password",
						ID:         "new_password",
						Name:       "new_password",
						FormID:     "profile_password_form",
						Attributes: templ.Attributes{"autocomplete": "new-password"},
					})
					@formc.FormMessage(formc.FormMessageArgs{
						ID:      "msg-new_password",
						Message: errs["new_password"],
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For:      "confirm_password",
						HasError: errs["confirm_password"] != "",
					}) {
						Confirm new password
					}
					@inputc.Input(inputc.InputArgs{
						Type:       "password",
						ID:         "confirm_password",
						Name:       "confirm_password",
						FormID:     "profile_password_form",
						Attributes: templ.Attributes{"autocomplete": "new-password"},
					})
					@formc.FormMessage(formc.FormMessageArgs{
						ID:      "msg-confirm_password",
						Message: errs["confirm_password"],
					})
				}
				<div class="flex gap-2 mt-4">
					@buttonc.Button(buttonc.ButtonArgs{
						Type:    "submit",
						Variant: "default",
					}) {
						Update Password
					}
				</div>
			}
			if success != "" {
				<div
					data-on-load={ "$profile_password_form.current_password=''; $profile_password_form.new_password=''; $profile_password_form.confirm_password='';" }
				></div>
			}
		</div>
	</div>
}

// ProfileContent is the fragment (no layout) for the profile page main area.
templ ProfileContent(basePath, csrf string, errs map[string]string, success, userTheme string) {
	<div class="bg-card text-card-foreground rounded-xl border shadow-sm p-6 mb-6">
		<div class="mb-4">
			<h2 class="text-2xl font-semibold text-foreground">User Profile</h2>
		</div>
	</div>
	<div class="bg-card text-card-foreground rounded-xl border shadow-sm p-6 mb-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-foreground">Appearance</h3>
		</div>
		<p class="text-sm text-muted-foreground mb-4">Choose how Farm Manager looks to you.</p>
		<div id="theme-status" class="mb-4"></div>
		@formc.Form(formc.FormArgs{
			Action: basePath + "/profile/theme",
			Attributes: templ.Attributes{
				"data-on-submit": "@post('" + basePath + "/profile/theme', { contentType: 'form', target: '#theme-status' })",
			},
		}) {
			<input type="hidden" name="csrf_token" value={ csrf }/>
			<div class="flex items-center justify-between">
				<label class="text-sm font-medium text-foreground">Theme</label>
				<div class="flex items-center space-x-2">
					<span class="text-sm text-muted-foreground" data-text="$theme === 'light' ? 'Light' : $theme === 'dark' ? 'Dark' : 'System'"></span>
					@themetoggle.ThemeToggle(themetoggle.ThemeToggleArgs{
						Attributes: templ.Attributes{
							"data-on-click:after": "el.closest('form')?.requestSubmit()", // submit after toggle updates $theme
						},
					})
				</div>
			</div>
		}
	</div>
	@ProfilePasswordFragment(basePath, csrf, errs, success)
}

// ProfilePage composes BaseLayout + ProfileContent for initial load.
templ ProfilePage(basePath, title, csrf string, errs map[string]string, success, username, userTheme string) {
	@layouts.Root(basePath, title, true, csrf, username, userTheme) {
		@ProfileContent(basePath, csrf, errs, success, userTheme)
	}
}
