package pages

import (
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// BarnContent renders the barn edit content (without layout)
templ BarnContent(basePath, csrf string, barn *domain.Barn) {
	{{
		// Set up form signals with initial values
		initialData := map[string]interface{}{
			"barn":                 "",
			"capacity":             "",
			"location":             "",
			"environment_control":  "",
			"maintenance_schedule": "",
		}

		// Pre-populate signals if editing existing barn
		if barn != nil {
			initialData["barn"] = barn.Name
			if barn.Capacity != nil {
				initialData["capacity"] = strconv.Itoa(int(*barn.Capacity))
			}
			if barn.Location != nil {
				initialData["location"] = *barn.Location
			}
			if barn.EnvironmentControl != nil {
				initialData["environment_control"] = *barn.EnvironmentControl
			}
			if barn.MaintenanceSchedule != nil {
				initialData["maintenance_schedule"] = *barn.MaintenanceSchedule
			}
		}

		signals := utilsc.Signals("barn_form", initialData)

		// Compute form action URL
		actionURL := basePath + "/management/barns"
		if barn != nil {
			actionURL = basePath + "/management/barns/" + strconv.FormatInt(barn.BarnID, 10)
		}
	}}
	<div id="content" data-signals={ signals.DataSignals } class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-foreground">
				if barn == nil {
					Create New Barn
				} else {
					Edit Barn: { barn.Name }
				}
			</h3>
		</div>
		@formc.Form(formc.FormArgs{
			ID:     "barn_form",
			Action: actionURL,
			Attributes: templ.Attributes{
				"data-target":  "#content",
				"autocomplete": "off",
			},
		}) {
			<input type="hidden" name="csrf_token" value={ csrf }/>
			if barn != nil {
				<input type="hidden" name="_method" value="PUT"/>
			}
			<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "barn",
					}) {
						Name *
					}
					@inputc.Input(inputc.InputArgs{
						Type:     "text",
						ID:       "barn",
						Name:     "barn",
						FormID:   "barn_form",
						Required: true,
						Attributes: templ.Attributes{
							"placeholder": "Enter barn name",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "capacity",
					}) {
						Capacity
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "number",
						ID:     "capacity",
						Name:   "capacity",
						FormID: "barn_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter capacity (optional)",
							"min":         "1",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "location",
					}) {
						Location
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "location",
						Name:   "location",
						FormID: "barn_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter location (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "environment_control",
					}) {
						Environment Control
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "environment_control",
						Name:   "environment_control",
						FormID: "barn_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter environment control details (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "maintenance_schedule",
					}) {
						Maintenance Schedule
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "maintenance_schedule",
						Name:   "maintenance_schedule",
						FormID: "barn_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter maintenance schedule (optional)",
						},
					})
				}
			</div>
			<div class="flex gap-2 mt-6">
				@buttonc.Button(buttonc.ButtonArgs{
					Type:    "submit",
					Variant: "default",
				}) {
					Save
				}
			</div>
		}
	</div>
}

// BarnPage renders the barn edit page
templ BarnPage(basePath, csrf, username, userTheme string, barn *domain.Barn) {
	@layouts.Root(basePath, "Barn Management", true, csrf, username, userTheme) {
		@BarnContent(basePath, csrf, barn)
	}
}
