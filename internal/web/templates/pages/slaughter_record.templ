package pages

import (
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// SlaughterRecordPage renders the slaughter record edit page
templ SlaughterRecordPage(basePath, csrf, username, userTheme string, slaughterRecord *domain.SlaughterRecord, productionBatches []*domain.ProductionBatch, staff []*domain.Staff) {
	@layouts.Root(basePath, "Slaughter Record Management", true, csrf, username, userTheme) {
		@SlaughterRecordContent(basePath, csrf, slaughterRecord, productionBatches, staff)
	}
}

// SlaughterRecordContent renders the slaughter record content for DataStar fragments
templ SlaughterRecordContent(basePath, csrf string, slaughterRecord *domain.SlaughterRecord, productionBatches []*domain.ProductionBatch, staff []*domain.Staff) {
	{{
		// Set up form signals with initial values
		initialData := map[string]interface{}{
			"batch_id":           "",
			"date":               "",
			"number_slaughtered": "",
			"meat_yield":         "",
			"waste":              "",
			"staff_id":           "",
		}

		// Pre-populate signals if editing existing slaughter record
		if slaughterRecord != nil {
			initialData["batch_id"] = strconv.FormatInt(slaughterRecord.BatchID, 10)
			if slaughterRecord.Date != nil {
				initialData["date"] = slaughterRecord.Date.Format("2006-01-02")
			}
			if slaughterRecord.NumberSlaughtered != nil {
				initialData["number_slaughtered"] = strconv.Itoa(*slaughterRecord.NumberSlaughtered)
			}
			if slaughterRecord.MeatYield != nil {
				initialData["meat_yield"] = strconv.FormatFloat(*slaughterRecord.MeatYield, 'f', 2, 64)
			}
			if slaughterRecord.Waste != nil {
				initialData["waste"] = strconv.FormatFloat(*slaughterRecord.Waste, 'f', 2, 64)
			}
			if slaughterRecord.StaffID != nil {
				initialData["staff_id"] = strconv.FormatInt(*slaughterRecord.StaffID, 10)
			}
		}

		signals := utilsc.Signals("slaughter_record_form", initialData)

		actionURL := basePath + "/management/slaughter-records"

		if slaughterRecord != nil {
			actionURL = basePath + "/management/slaughter-records/" + strconv.FormatInt(slaughterRecord.SlaughterID, 10)
		}
	}}
	<div id="content" data-signals={ signals.DataSignals } class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-foreground">
				if slaughterRecord == nil {
					Create New Slaughter Record
				} else {
					Edit Slaughter Record: { strconv.FormatInt(slaughterRecord.SlaughterID, 10) }
				}
			</h3>
		</div>
		@formc.Form(formc.FormArgs{
			ID: "slaughter_record_form",
			Attributes: templ.Attributes{
				"data-target":  "#content",
				"autocomplete": "off",
			},
		
			Action: actionURL,
		}) {
			<input type="hidden" name="csrf_token" value={ csrf }/>
			if slaughterRecord != nil {
				<input type="hidden" name="_method" value="PUT"/>
			}
			<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "batch_id",
					}) {
						Batch ID *
					}
					<select
						id="batch_id"
						name="batch_id"
						form="slaughter_record_form"
						required
						data-bind="slaughter_record_form.batch_id"
					>
						<option value="">Select a production batch</option>
						for _, batch := range productionBatches {
							<option value={ strconv.FormatInt(batch.BatchID, 10) }>
								{ strconv.FormatInt(batch.BatchID, 10) }
							</option>
						}
					</select>
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "date",
					}) {
						Date
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "date",
						ID:     "date",
						Name:   "date",
						FormID: "slaughter_record_form",
						Attributes: templ.Attributes{
							"placeholder": "Select date (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "number_slaughtered",
					}) {
						Number Slaughtered
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "number",
						ID:     "number_slaughtered",
						Name:   "number_slaughtered",
						FormID: "slaughter_record_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter number slaughtered (optional)",
							"min":         "0",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "meat_yield",
					}) {
						Meat Yield
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "number",
						ID:     "meat_yield",
						Name:   "meat_yield",
						FormID: "slaughter_record_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter meat yield (optional)",
							"step":        "0.01",
							"min":         "0",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "waste",
					}) {
						Waste
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "number",
						ID:     "waste",
						Name:   "waste",
						FormID: "slaughter_record_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter waste (optional)",
							"step":        "0.01",
							"min":         "0",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "staff_id",
					}) {
						Staff ID
					}
					<select
						id="staff_id"
						name="staff_id"
						form="slaughter_record_form"
						data-bind="slaughter_record_form.staff_id"
					>
						<option value="">Select staff (optional)</option>
						for _, s := range staff {
							<option value={ strconv.FormatInt(s.StaffID, 10) }>
								{ s.Name }
							</option>
						}
					</select>
				}
			</div>
			<div class="flex gap-2 mt-6">
				@buttonc.Button(buttonc.ButtonArgs{
					Type:    "submit",
					Variant: "default",
				}) {
					Submit
				}
			</div>
		}
	</div>
}
