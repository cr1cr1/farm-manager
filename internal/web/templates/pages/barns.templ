package pages

import (
	"fmt"
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// BarnsContent renders the barns management content (without layout)
templ BarnsContent(basePath, csrf string, barns []*domain.Barn) {
	<div class="bg-card text-card-foreground rounded-xl border shadow-sm p-6 mb-6">
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-2xl font-semibold text-foreground">üè≠ Barn Management</h2>
			@buttonc.Button(buttonc.ButtonArgs{
				Variant: "default",
				Attributes: templ.Attributes{
					"data-on-click": "@get('" + basePath + "/management/barns/new', '#content')",
				},
			}) {
				Add New Barn
			}
		</div>
		if len(barns) == 0 {
			<div class="text-center py-8">
				<p class="text-muted-foreground mb-4">No barns found.</p>
				@buttonc.Button(buttonc.ButtonArgs{
					Variant: "default",
					Attributes: templ.Attributes{
						"data-on-click": "@get('" + basePath + "/management/barns/new', '#content')",
					},
				}) {
					Create Your First Barn
				}
			</div>
		} else {
			<div class="overflow-x-auto">
				<table class="w-full border-collapse">
					<thead>
						<tr class="border-b">
							<th class="text-left p-2 font-medium">Name</th>
							<th class="text-left p-2 font-medium">Capacity</th>
							<th class="text-left p-2 font-medium">Location</th>
							<th class="text-left p-2 font-medium">Environment Control</th>
							<th class="text-left p-2 font-medium">Actions</th>
						</tr>
					</thead>
					<tbody>
						for _, barn := range barns {
							<tr class="border-b hover:bg-muted/50">
								<td class="p-2">{ barn.Name }</td>
								<td class="p-2">
									if barn.Capacity != nil {
										{ fmt.Sprintf("%d", *barn.Capacity) }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									if barn.Location != nil {
										{ *barn.Location }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									if barn.EnvironmentControl != nil {
										{ *barn.EnvironmentControl }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									<div class="flex gap-2">
										@buttonc.Button(buttonc.ButtonArgs{
											Variant: "outline",
											Size:    "sm",
											Attributes: templ.Attributes{
												"data-on-click": "@get('" + basePath + "/management/barns/" + strconv.FormatInt(barn.BarnID, 10) + "', '#content')",
											},
										}) {
											Edit
										}
										@buttonc.Button(buttonc.ButtonArgs{
											Variant: "destructive",
											Size:    "sm",
											Attributes: templ.Attributes{
												"data-on-click": "$confirm('Are you sure you want to delete this barn?') && @delete('" + basePath + "/management/barns/" + strconv.FormatInt(barn.BarnID, 10) + "', {headers: {'X-CSRF-Token': '" + csrf + "'}})",
											},
										}) {
											Delete
										}
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
	<div id="content" class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<p class="text-muted-foreground">Select a barn to edit or create a new one.</p>
	</div>
}

// BarnsPage renders the barns management page
templ BarnsPage(basePath, csrf, username, userTheme string, barns []*domain.Barn) {
	@layouts.Root(basePath, "Barn Management", true, csrf, username, userTheme) {
		@BarnsContent(basePath, csrf, barns)
	}
}
