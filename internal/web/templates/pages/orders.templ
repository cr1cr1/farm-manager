package pages

import (
	"fmt"
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// OrdersContent renders the orders management content
templ OrdersContent(basePath, csrf string, orders []*domain.Order) {
	<div class="bg-card text-card-foreground rounded-xl border shadow-sm p-6 mb-6">
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-2xl font-semibold text-foreground">ðŸ“‹ Order Management</h2>
			@buttonc.Button(buttonc.ButtonArgs{
				Variant: "default",
				Attributes: templ.Attributes{
					"data-on-click": "@get('" + basePath + "/management/orders/new', '#content')",
				},
			}) {
				Add New Order
			}
		</div>
		if len(orders) == 0 {
			<div class="text-center py-8">
				<p class="text-muted-foreground mb-4">No orders found.</p>
				@buttonc.Button(buttonc.ButtonArgs{
					Variant: "default",
					Attributes: templ.Attributes{
						"data-on-click": "@get('" + basePath + "/management/orders/new', '#content')",
					},
				}) {
					Create Your First Order
				}
			</div>
		} else {
			<div class="overflow-x-auto">
				<table class="w-full border-collapse">
					<thead>
						<tr class="border-b">
							<th class="text-left p-2 font-medium">Order ID</th>
							<th class="text-left p-2 font-medium">Customer</th>
							<th class="text-left p-2 font-medium">Order Date</th>
							<th class="text-left p-2 font-medium">Delivery Date</th>
							<th class="text-left p-2 font-medium">Total Amount</th>
							<th class="text-left p-2 font-medium">Status</th>
							<th class="text-left p-2 font-medium">Actions</th>
						</tr>
					</thead>
					<tbody>
						for _, order := range orders {
							<tr class="border-b hover:bg-muted/50">
								<td class="p-2">{ strconv.FormatInt(order.OrderID, 10) }</td>
								<td class="p-2">
									if order.Customer != nil {
										{ order.Customer.Name }
									} else {
										Customer #{ strconv.FormatInt(order.CustomerID, 10) }
									}
								</td>
								<td class="p-2">
									if order.OrderDate != nil {
										{ order.OrderDate.Format("2006-01-02") }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									if order.DeliveryDate != nil {
										{ order.DeliveryDate.Format("2006-01-02") }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									if order.TotalAmount != nil {
										{ fmt.Sprintf("%.2f", *order.TotalAmount) }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									if order.Status != nil {
										{ *order.Status }
									} else {
										<span class="text-muted-foreground">-</span>
									}
								</td>
								<td class="p-2">
									<div class="flex gap-2">
										@buttonc.Button(buttonc.ButtonArgs{
											Variant: "outline",
											Size:    "sm",
											Attributes: templ.Attributes{
												"data-on-click": "@get('" + basePath + "/management/orders/" + strconv.FormatInt(order.OrderID, 10) + "', '#content')",
											},
										}) {
											Edit
										}
										@buttonc.Button(buttonc.ButtonArgs{
											Variant: "destructive",
											Size:    "sm",
											Attributes: templ.Attributes{
												"data-on-click": "$confirm('Are you sure you want to delete this order?') && @delete('" + basePath + "/management/orders/" + strconv.FormatInt(order.OrderID, 10) + "', {headers: {'X-CSRF-Token': '" + csrf + "'}})",
											},
										}) {
											Delete
										}
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
	<div id="content" class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<p class="text-muted-foreground">Select an order to edit or create a new one.</p>
	</div>
}

// OrdersPage renders the orders management page
templ OrdersPage(basePath, csrf, username, userTheme string, orders []*domain.Order) {
	@layouts.Root(basePath, "Order Management", true, csrf, username, userTheme) {
		@OrdersContent(basePath, csrf, orders)
	}
}
