package pages

import (
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// CustomerPage renders the customer edit page
templ CustomerPage(basePath, csrf, username, userTheme string, customer *domain.Customer) {
	@layouts.Root(basePath, "Customer Management", true, csrf, username, userTheme) {
		@CustomerContent(basePath, csrf, customer)
	}
}

// CustomerContent renders the customer content for DataStar fragments
templ CustomerContent(basePath, csrf string, customer *domain.Customer) {
	{{
		// Set up form signals with initial values
		initialData := map[string]interface{}{
			"customer":         "",
			"contact_info":     "",
			"delivery_address": "",
			"customer_type":    "",
		}

		// Pre-populate signals if editing existing customer
		if customer != nil {
			initialData["customer"] = customer.Name
			if customer.ContactInfo != nil {
				initialData["contact_info"] = *customer.ContactInfo
			}
			if customer.DeliveryAddress != nil {
				initialData["delivery_address"] = *customer.DeliveryAddress
			}
			if customer.CustomerType != nil {
				initialData["customer_type"] = *customer.CustomerType
			}
		}

		signals := utilsc.Signals("customer_form", initialData)

		// Compute form action URL
		actionURL := basePath + "/management/customers"
		if customer != nil {
			actionURL = basePath + "/management/customers/" + strconv.FormatInt(customer.CustomerID, 10)
		}
	}}
	<div id="content" data-signals={ signals.DataSignals } class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-foreground">
				if customer == nil {
					Create New Customer
				} else {
					Edit Customer: { customer.Name }
				}
			</h3>
		</div>
		@formc.Form(formc.FormArgs{
			ID:     "customer_form",
			Action: actionURL,
			Attributes: templ.Attributes{
				"data-target":  "#content",
				"autocomplete": "off",
			},
		}) {
			<input type="hidden" name="csrf_token" value={ csrf }/>
			if customer != nil {
				<input type="hidden" name="_method" value="PUT"/>
			}
			<div class="grid grid-cols-1 gap-4">
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "name",
					}) {
						Name *
					}
					@inputc.Input(inputc.InputArgs{
						Type:     "text",
						ID:       "customer",
						Name:     "customer",
						FormID:   "customer_form",
						Required: true,
						Attributes: templ.Attributes{
							"placeholder": "Enter customer name",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "contact_info",
					}) {
						Contact Info
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "contact_info",
						Name:   "contact_info",
						FormID: "customer_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter contact information (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "delivery_address",
					}) {
						Delivery Address
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "delivery_address",
						Name:   "delivery_address",
						FormID: "customer_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter delivery address (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "customer_type",
					}) {
						Customer Type
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "customer_type",
						Name:   "customer_type",
						FormID: "customer_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter customer type (optional)",
						},
					})
				}
			</div>
			<div class="flex gap-2 mt-6">
				@buttonc.Button(buttonc.ButtonArgs{
					Type:    "submit",
					Variant: "default",
				}) {
					Save
				}
			</div>
		}
	</div>
}
