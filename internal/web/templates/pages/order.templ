package pages

import (
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// OrderContent renders the order edit content
templ OrderContent(basePath, csrf string, order *domain.Order, customers []*domain.Customer) {
	{{
		// Set up form signals with initial values
		initialData := map[string]interface{}{
			"customer_id":   "",
			"order_date":    "",
			"delivery_date": "",
			"total_amount":  "",
			"status":        "",
		}

		// Pre-populate signals if editing existing order
		if order != nil {
			initialData["customer_id"] = strconv.FormatInt(order.CustomerID, 10)
			if order.OrderDate != nil {
				initialData["order_date"] = order.OrderDate.Format("2006-01-02")
			}
			if order.DeliveryDate != nil {
				initialData["delivery_date"] = order.DeliveryDate.Format("2006-01-02")
			}
			if order.TotalAmount != nil {
				initialData["total_amount"] = strconv.FormatFloat(*order.TotalAmount, 'f', 2, 64)
			}
			if order.Status != nil {
				initialData["status"] = *order.Status
			}
		}

		signals := utilsc.Signals("order_form", initialData)

		// Compute form action URL
		actionURL := basePath + "/management/orders"
		if order != nil {
			actionURL = basePath + "/management/orders/" + strconv.FormatInt(order.OrderID, 10)
		}
	}}
	<div id="content" data-signals={ signals.DataSignals } class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-foreground">
				if order == nil {
					Create New Order
				} else {
					Edit Order #{ strconv.FormatInt(order.OrderID, 10) }
				}
			</h3>
		</div>
		@formc.Form(formc.FormArgs{
			ID: "order_form",
			Attributes: templ.Attributes{
				"data-target":  "#content",
				"autocomplete": "off",
			},
		
			Action: actionURL,
		}) {
			<input type="hidden" name="csrf_token" value={ csrf }/>
			if order != nil {
				<input type="hidden" name="_method" value="PUT"/>
			}
			<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "customer_id",
					}) {
						Customer ID *
					}
					<select
						id="customer_id"
						name="customer_id"
						form="order_form"
						required
						data-signals="order_form"
						data-bind="order_form.customer_id"
					>
						<option value="">Select a customer</option>
						for _, customer := range customers {
							<option value={ strconv.FormatInt(customer.CustomerID, 10) }>
								{ customer.Name }
							</option>
						}
					</select>
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "order_date",
					}) {
						Order Date
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "date",
						ID:     "order_date",
						Name:   "order_date",
						FormID: "order_form",
						Attributes: templ.Attributes{
							"placeholder": "Select order date (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "delivery_date",
					}) {
						Delivery Date
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "date",
						ID:     "delivery_date",
						Name:   "delivery_date",
						FormID: "order_form",
						Attributes: templ.Attributes{
							"placeholder": "Select delivery date (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "total_amount",
					}) {
						Total Amount
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "number",
						ID:     "total_amount",
						Name:   "total_amount",
						FormID: "order_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter total amount (optional)",
							"step":        "0.01",
							"min":         "0",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{
					Class: "md:col-span-2",
				}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "status",
					}) {
						Status
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "status",
						Name:   "status",
						FormID: "order_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter order status (optional)",
						},
					})
				}
			</div>
			<div class="flex gap-2 mt-6">
				@buttonc.Button(buttonc.ButtonArgs{
					Type:    "submit",
					Variant: "default",
				}) {
					Save
				}
			</div>
		}
	</div>
}

// OrderPage renders the order edit page
templ OrderPage(basePath, csrf, username, userTheme string, order *domain.Order, customers []*domain.Customer) {
	@layouts.Root(basePath, "Order Management", true, csrf, username, userTheme) {
		@OrderContent(basePath, csrf, order, customers)
	}
}
