package pages

import (
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// StaffMemberContent renders the staff member edit content
templ StaffMemberContent(basePath, csrf string, staff *domain.Staff) {
	{{
		// Set up form signals with initial values
		initialData := map[string]interface{}{
			"staff":        "",
			"role":         "",
			"schedule":     "",
			"contact_info": "",
		}

		// Pre-populate signals if editing existing staff member
		if staff != nil {
			initialData["staff"] = staff.Name
			if staff.Role != nil {
				initialData["role"] = *staff.Role
			}
			if staff.Schedule != nil {
				initialData["schedule"] = *staff.Schedule
			}
			if staff.ContactInfo != nil {
				initialData["contact_info"] = *staff.ContactInfo
			}
		}

		signals := utilsc.Signals("staff_member_form", initialData)

		// Compute form action URL
		actionURL := basePath + "/management/staff"
		if staff != nil {
			actionURL = basePath + "/management/staff/" + strconv.FormatInt(staff.StaffID, 10)
		}
	}}
	<div id="content" data-signals={ signals.DataSignals }>
		<div class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
			<div class="mb-4">
				<h3 class="text-lg font-semibold text-foreground">
					if staff == nil {
						Create New Staff Member
					} else {
						Edit Staff Member: { staff.Name }
					}
				</h3>
			</div>
			@formc.Form(formc.FormArgs{
				ID:     "staff_member_form",
				Action: actionURL,
				Attributes: templ.Attributes{
					"data-target":  "#content",
					"autocomplete": "off",
				},
			}) {
				<input type="hidden" name="csrf_token" value={ csrf }/>
				if staff != nil {
					<input type="hidden" name="_method" value="PUT"/>
				}
				<div class="grid grid-cols-1 gap-4">
					@form.FormItem(form.FormItemArgs{}) {
						@formc.FormLabel(formc.FormLabelArgs{
							For: "name",
						}) {
							Name *
						}
						@inputc.Input(inputc.InputArgs{
							Type:     "text",
							ID:       "staff",
							Name:     "staff",
							FormID:   "staff_member_form",
							Required: true,
							Attributes: templ.Attributes{
								"placeholder": "Enter staff member name",
							},
						})
					}
					@form.FormItem(form.FormItemArgs{}) {
						@formc.FormLabel(formc.FormLabelArgs{
							For: "role",
						}) {
							Role
						}
						@inputc.Input(inputc.InputArgs{
							Type:   "text",
							ID:     "role",
							Name:   "role",
							FormID: "staff_member_form",
							Attributes: templ.Attributes{
								"placeholder": "Enter role (optional)",
							},
						})
					}
					@form.FormItem(form.FormItemArgs{}) {
						@formc.FormLabel(formc.FormLabelArgs{
							For: "schedule",
						}) {
							Schedule
						}
						@inputc.Input(inputc.InputArgs{
							Type:   "text",
							ID:     "schedule",
							Name:   "schedule",
							FormID: "staff_member_form",
							Attributes: templ.Attributes{
								"placeholder": "Enter schedule (optional)",
							},
						})
					}
					@form.FormItem(form.FormItemArgs{}) {
						@formc.FormLabel(formc.FormLabelArgs{
							For: "contact_info",
						}) {
							Contact Info
						}
						@inputc.Input(inputc.InputArgs{
							Type:   "text",
							ID:     "contact_info",
							Name:   "contact_info",
							FormID: "staff_member_form",
							Attributes: templ.Attributes{
								"placeholder": "Enter contact information (optional)",
							},
						})
					}
				</div>
				<div class="flex gap-2 mt-6">
					@buttonc.Button(buttonc.ButtonArgs{
						Type:    "submit",
						Variant: "default",
					}) {
						Save
					}
				</div>
			}
		</div>
	</div>
}

// StaffMemberPage renders the staff member edit page
templ StaffMemberPage(basePath, csrf, username, userTheme string, staff *domain.Staff) {
	@layouts.Root(basePath, "Staff Member", true, csrf, username, userTheme) {
		@StaffMemberContent(basePath, csrf, staff)
	}
}
