package pages

import (
	"strconv"

	buttonc "github.com/coreycole/datastarui/components/button"
	formc "github.com/coreycole/datastarui/components/form"
	inputc "github.com/coreycole/datastarui/components/input"
	utilsc "github.com/coreycole/datastarui/utils"
	"github.com/cr1cr1/farm-manager/internal/domain"
	"github.com/cr1cr1/farm-manager/internal/web/templates/components/form"
	"github.com/cr1cr1/farm-manager/internal/web/templates/layouts"
)

// FeedTypeContent renders the feed type edit content (without layout)
templ FeedTypeContent(basePath, csrf string, feedType *domain.FeedType) {
	{{
		// Set up form signals with initial values
		initialData := map[string]interface{}{
			"feed":             "",
			"description":      "",
			"nutritional_info": "",
		}

		// Pre-populate signals if editing existing feed type
		if feedType != nil {
			initialData["feed"] = feedType.Name
			if feedType.Description != nil {
				initialData["description"] = *feedType.Description
			}
			if feedType.NutritionalInfo != nil {
				initialData["nutritional_info"] = *feedType.NutritionalInfo
			}
		}

		signals := utilsc.Signals("feed_type_form", initialData)

		// Compute form action URL
		actionURL := basePath + "/management/feed-types"
		if feedType != nil {
			actionURL = basePath + "/management/feed-types/" + strconv.FormatInt(feedType.FeedTypeID, 10)
		}
	}}
	<div id="content" data-signals={ signals.DataSignals } class="bg-card text-card-foreground rounded-xl border shadow-sm p-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-foreground">
				if feedType == nil {
					Create New Feed Type
				} else {
					Edit Feed Type: { feedType.Name }
				}
			</h3>
		</div>
		@formc.Form(formc.FormArgs{
			ID:     "feed_type_form",
			Action: actionURL,
			Attributes: templ.Attributes{
				"data-target":  "#content",
				"autocomplete": "off",
			},
		}) {
			<input type="hidden" name="csrf_token" value={ csrf }/>
			if feedType != nil {
				<input type="hidden" name="_method" value="PUT"/>
			}
			<div class="grid grid-cols-1 gap-4">
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "name",
					}) {
						Name *
					}
					@inputc.Input(inputc.InputArgs{
						Type:     "text",
						ID:       "feed",
						Name:     "feed",
						FormID:   "feed_type_form",
						Required: true,
						Attributes: templ.Attributes{
							"placeholder": "Enter feed type name",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "description",
					}) {
						Description
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "description",
						Name:   "description",
						FormID: "feed_type_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter description (optional)",
						},
					})
				}
				@form.FormItem(form.FormItemArgs{}) {
					@formc.FormLabel(formc.FormLabelArgs{
						For: "nutritional_info",
					}) {
						Nutritional Info
					}
					@inputc.Input(inputc.InputArgs{
						Type:   "text",
						ID:     "nutritional_info",
						Name:   "nutritional_info",
						FormID: "feed_type_form",
						Attributes: templ.Attributes{
							"placeholder": "Enter nutritional information (optional)",
						},
					})
				}
			</div>
			<div class="flex gap-2 mt-6">
				@buttonc.Button(buttonc.ButtonArgs{
					Type:    "submit",
					Variant: "default",
				}) {
					Save
				}
			</div>
		}
	</div>
}

// FeedTypePage renders the feed type edit page
templ FeedTypePage(basePath, csrf, username, userTheme string, feedType *domain.FeedType) {
	@layouts.Root(basePath, "Feed Type Management", true, csrf, username, userTheme) {
		@FeedTypeContent(basePath, csrf, feedType)
	}
}
