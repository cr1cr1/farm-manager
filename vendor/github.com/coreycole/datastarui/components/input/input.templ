package input

import "strings"

templ Input(args InputArgs) {
	{{
		// Generate CSS classes
		classes := inputVariants(args.Class)

		// Set up input attributes
		var inputAttrs templ.Attributes
		inputAttrs = make(templ.Attributes)

		// Copy user-provided attributes first
		for k, v := range args.Attributes {
			inputAttrs[k] = v
		}

		// Standard input attributes
		inputAttrs["data-slot"] = "input"
		inputAttrs["class"] = classes

		if args.Type != "" {
			inputAttrs["type"] = args.Type
		}
		if args.Placeholder != "" {
			inputAttrs["placeholder"] = args.Placeholder
		}
		if args.Value != "" {
			inputAttrs["value"] = args.Value
		}
		if args.Name != "" {
			inputAttrs["name"] = args.Name
		}
		if args.ID != "" {
			inputAttrs["id"] = args.ID
		}
		if args.Disabled {
			inputAttrs["disabled"] = true
		}
		if args.Required {
			inputAttrs["required"] = true
		}

		// Set up data-bind if FormID and Name are provided
		if args.FormID != "" && args.Name != "" {
			// Convert form ID to valid signal name (replace hyphens with underscores)
			signalName := strings.ReplaceAll(args.FormID, "-", "_")
			dataBindValue := signalName + "." + args.Name
			inputAttrs["data-bind"] = dataBindValue

			// Don't try to initialize nested signals here - let the form handle it
			// The data-bind will automatically create the signal if it doesn't exist
		}
	}}
	<input
		{ inputAttrs... }
	/>
}
